#labels Phase-Design,Featured
== History ==

The project started because Windows platform lacks native tool to apply
patches. There are plenty of tools PC to produce diffs - from scripts
bundled with python to commands of version control systems, but none of
them were able to apply these diffs back.

Usually patches are applied with a *patch* tool - a UNIX utility that
continues to be UNIX only as [http://www.gnu.org/software/patch/ a part of]
GNU tools. There is
[http://gnuwin32.sourceforge.net/packages/patch.htm windows port] of
*patch*, but was
[http://www.google.com/search?q=Assertion+failed%3A+hunk%2C+file+patch.c
rather buggy], insecure to be run on a web server and not customizable
without a C compiler. That's why this version was born. And I've always
wanted to have a *diff.py* counterpart [http://bugs.python.org/issue2057 bundled]
with Python.

*patch.py* is meant to be semi-automatic tool with intuitive defaults,
that also takes care of line end differences automatically.

== Status ==

*NOTE:* API is very unstable, so use strict dependencies when using this
tool as a library.

Currently it is capable to apply only _unified diffs_. It also doesn't
support file renames, creation and removals.

*patch.py* is designed to transparently handle line end differences. It
tries to convert patch lines into 
best suitable format for patched file. While scanning lines patch.py
notices line endings in source file and if they are consistent - patch
lines are applied with the same ending. If they are not - lines are applied
"as is" (as in patch).


Parsing of diff is done in a in very straightforward manner as an exercise
to approach the problem of parsing on my own before learning the 'proper
ways'. Thanks creators, _the format of unified diff_ is rather simple (an
illustration is included in
[http://python-patch.googlecode.com/svn/trunk/doc/ source doc/] directory).

Current focus is to simplify parser, make it more modular to allow easy
customization and extension. Some care should be given to
"\ No newline at end of file" cases. Test suite should be expanded. And the
last thing - this script is not interactive.


== Changes ==
{{{
10.04
    - renamed debug option to --debug
    - API changes
      * method names are now underscored for consistency with difflib
      + addded Patch.can_patch(filename) to test if source file is in list
        of source filenames and can be patched
      * use designated logger "python_patch" instead of default
9.08-2
    - compatibility fix for Python 2.4
9.08-1
    - fixed issue #2 - remove trailing whitespaces from filename
      (thanks James from Twisted Fish)
    - API changes
      + added Patch and HunkInfo classes
      * moved utility methods into Patch
      + build Patch object by specifying stream to constructor
        or use top level functions fromfile() and fromstring()
    - added test suite
8.06-2
    - compatibility fix for Python 2.4
8.06-1
    - initial release
}}}

== Future ==

Patch utility in Python makes it possible to implement online "submit,
review and apply" module. Similar to [http://www.reviewboard.org/ Review Board]
for code, but suitable for all kind of textual content that uses
unified diffs as an interchange format between users, website, and version
control system. With this system patches can be applied after on site
review, automatically storing the names of patch contributors in SVN
history logs without requiring write access for these contributors. This
system is not the scope of this project though.

Additional unified diff parsers may be added in future to compare different
parsing techniques (with [http://pyparsing.wikispaces.com/ pyparsing],
[http://www.ibm.com/developerworks/library/l-spark.html SPARK] or
[http://www.google.com/Top/Computers/Programming/Languages/Python/Modules/Text_Processing/ others]
as example).

See also https://code.google.com/p/rainforce/wiki/ModerationQueue
