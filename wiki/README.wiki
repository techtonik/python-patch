#labels Phase-Design,Featured
== History ==

The project started because Windows platform lacks native tool to apply
patches, and there was no cross-platform solution that could be safely
run by web server process.

Usually patches are applied with a UNIX *patch* utility 
[http://www.gnu.org/software/patch/ from GNU tools]. It is
[http://gnuwin32.sourceforge.net/packages/patch.htm ported to windows],
but still feels
[http://www.google.com/search?q=Assertion+failed%3A+hunk%2C+file+patch.c buggy and insecure] for web server process. It is also not customizable
without a C compiler, which is a problem for Windows. So it was good to have a good utility written in Python that can be potential
[http://bugs.python.org/issue2057 *diff.py* counterpart].

*patch.py* is meant to be a command line tool with intuitive defaults,
taking care of the most problems (e.g. line end differences) automatically.


== Status ==

*NOTE:* API is unstable, so use strict dependencies on major version when
using this tool as a library.

It understands only _unified diffs_. Currently it doesn't support file
renames, creation and removals.

Note that *patch.py* was not designed to reproduce original files. Parsing
is a lossy process where data is normalized to be cross-platform. Absolute
paths are stripped as well as references to parent directories, backslashes
are converted to forward slashes and so on.

*patch.py* is designed to transparently handle line end differences. Line
endings from patch are converted into 
best suitable format for patched file. patch.py scans line endings in source
file, and if they are consistent - lines from patch are applied with the
same ending. If source linefeeds are inconsistend - lines from patch are
applied "as is".


Parsing of diff is done in a in very straightforward manner as an exercise
to approach the problem of parsing on my own before learning the 'proper
ways'. Thanks creators, _the format of unified diff_ is rather simple (an
illustration of Subversion style unified diff is included in
[http://python-patch.googlecode.com/svn/trunk/doc/ source doc/] directory).

== Features ==

 * Single file, which is a command line tool and library
 * No dependencies outside Python stdlib
 * Automatic correction of linefeeds according to patched file
 * Automatic correction of diffs broken by stripping trailing whitespace
 * Patch format detection (SVN, HG, GIT)
 * Show diffstat histogram
 * Python 2.5+ compatible, 2.7 tested, 3 not supported

Things that don't work:

 * Python 3
 * File renaming, creation and removal
 * Version control specific properties
 * Non-unified diff formats

== Library usage ==

See [APIUseCases].

== Changes ==
{{{
1.12.11  Major API Break

   - patch.py can read patches from stdin
   - patch.py can show nice histogram with --diffstat option
   - added detection of SVN, GIT and HG patch types, unrecognized
     patches marked as PLAIN
   - added error reporting for parsing functions and helpers (now they
     return False if parsing failed) - make sure you handle this correctly
   - added normalization to filenames to protect against patching files
     using absolute paths or files in parent directories
   - test run patch.py on all patches submitted to Python bug tracker, which
     resulted in improved parsing and error handling for some corner cases
   - improved logging
   - API changes
     * fromfile(), fromstring() and fromurl() now return False on errors
     * previous Patch is renamed to PatchSet, new Patch is single file entry
     * Patch.header is now a list of strings
     * PatchSet.parse() now returns True if parsing completed without errors
     + PatchSet.__len__()
     + PatchSet.diffstat()
     + PatchSet.type and Patch.type
     + PatchSet.errors and 
     + xisabs() cross-platform version of `os.path.isabs()`
     + xnormpath() forward slashed version of `os.path.normpath()`
     + xstrip() to strip absolute path prefixes

11.01
   - patch.py can read patches from web
   - patch.py returns -1 if there were errors during patching
   - store patch headers (necessary for future DIFF/SVN/HG/GIT detection)
   - report about extra bytes at the end after patch is parsed
   - API changes
     + fromurl()
     * Patch.apply() now returns True on success
10.11
   - fixed fromstring() failure due to invalid StringIO import (issue #9)
     (thanks john.stumpo for reporting)
   - added --verbose and --quiet options
   - improved message logging
   - change "successfully patched..." message to INFO instead of WARN
     (thanks Alex Stewart for reporting and patch)
   - skip __main__ imports when used as a library (patch by Alex Stewart)
   - API changes
      * renamed class HunkInfo to Hunk
      + Patch.type placeholder (no detection yet - parser is not ready)
      + constants for patch types DIFF/PLAIN, HG/MERCURIAL, SVN/SUBVERSION
      + Patch.header for saving headers which can be used later to extract
        additional meta information such as commit message
   - internal: improving parser speed by allowing blocks fetch lines on
               demand
   - test suite improvements
10.04
    - renamed debug option to --debug
    - API changes
      * method names are now underscored for consistency with difflib
      + addded Patch.can_patch(filename) to test if source file is in list
        of source filenames and can be patched
      * use designated logger "python_patch" instead of default
9.08-2
    - compatibility fix for Python 2.4
9.08-1
    - fixed issue #2 - remove trailing whitespaces from filename
      (thanks James from Twisted Fish)
    - API changes
      + added Patch and HunkInfo classes
      * moved utility methods into Patch
      + build Patch object by specifying stream to constructor
        or use top level functions fromfile() and fromstring()
    - added test suite
8.06-2
    - compatibility fix for Python 2.4
8.06-1
    - initial release
}}}


== Future ==

Patch utility in Python makes it possible to implement online "submit,
review and apply" module. Similar to [http://www.reviewboard.org/ Review Board]
for code, but suitable for all kind of textual content that uses
unified diffs as an interchange format between users, website, and version
control system. With this system patches can be applied after on site
review, automatically storing the names of patch contributors in SVN
history logs without requiring write access for these contributors. This
system is not the scope of this project though.

Additional unified diff parsers may be added in future to compare different
parsing techniques (with [http://pyparsing.wikispaces.com/ pyparsing],
[http://www.ibm.com/developerworks/library/l-spark.html SPARK] or
[http://www.google.com/Top/Computers/Programming/Languages/Python/Modules/Text_Processing/ others]
as example).

See also https://code.google.com/p/rainforce/wiki/ModerationQueue

It would be nice to further simplify parser, make it more modular to allow easy
customization and extension, but the primary focus for now is to figure out
an API that will make it usable as a library. There is separate TODO item to
check behavior of "\ No newline at end of file" cases. Other goals is to
expand test coverage, and try to make script more interactive.