#labels Phase-Design,Featured
== History ==

This project started because windows platform lacks native tool to apply patches. There are plenty of tools on my PC to produce diffs - from scripts bundled with python to several version control systems, but none of them is able to apply these diffs back.

Usually patches are applied with a *patch* tool - a UNIX utility that continues to be UNIX only as [http://www.gnu.org/software/patch/ a part of] GNU tools. There is [http://gnuwin32.sourceforge.net/packages/patch.htm windows port] of *patch*, but it's [http://www.google.com/search?q=Assertion+failed%3A+hunk%2C+file+patch.c rather buggy], insecure to be run on a web server and not customizable without a C compiler. That's why this version was born. And I've always wanted to have a *diff.py* [http://bugs.python.org/issue2057 counterpart bundled] with Python.

== Status ==

*patch.py* is capable to apply _unified diffs only_. Parsing of diff is done in a in very straightforward manner as an excercise to approach the problem of parsing on my own before learning the 'proper ways'. Thanks creators, _the format of unified diff_ is rather simple (an illustration is included in [http://python-patch.googlecode.com/svn/trunk/doc/ source doc/] directory).

Note about line end differences. patch.py tries to convert patch lines into best suitable format for patched file. While scanning lines patch.py notices line endings in source file and if they are consistent - patch lines are applied with the same ending. If they are not - lines are applied "as is" (as in patch).

The utility is not complete in the sense that there is no support for creating/deleting files, "\ No newline at end of file" scenarios need some checks. Test suite should be expanded to cover more use cases. And the last thing - this script is not interactive. 

== Changes ==
{{{
9.08-1
    - fixed issue #2 - remove trailing whitespaces from filename
      (thanks James from Twisted Fish)
    - API changes
      + added Patch and HunkInfo classes
      + moved utility methods into Patch
      + build Patch object by specifying stream to constructor
        or use top level functions fromfile() and fromstring()
    - added test suite
8.06-2
    - compatibility fix for Python 2.4
8.06-1
    - initial release
}}}

= Future =
Patch utility in Python makes it possible to implement online "submit, review and apply" module site content that uses unified diffs as an interchange format between users, site, and version control system. With this system patches can be applied after onsite review automatically storing the names of patch contributors in SVN history logs without requiring a write access for these contributors. This system is not the scope of this project though.

Additional unified diff parsers may be added in future to compare different parsing techniques (with [http://pyparsing.wikispaces.com/ pyparsing], [http://www.ibm.com/developerworks/library/l-spark.html SPARK] or [http://www.google.com/Top/Computers/Programming/Languages/Python/Modules/Text_Processing/ others] as example).